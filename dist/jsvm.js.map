{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./src/ast_map.ts","webpack://[name]/./src/break_signal.ts","webpack://[name]/./src/constant_table.ts","webpack://[name]/./src/index.ts","webpack://[name]/./src/scope.ts"],"names":[],"mappings":"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,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC;YACxB,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC;YACxB,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC;YACpB,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC;YACtB,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC;YACpB,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC;YACtB,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC;YACtB,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC;YACtB,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC;YACxB,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC;YACpB,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC;YACpB,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC;YACpB,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC;YACpB,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC;YACpB,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC;YACpB,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC;YACpB,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC;YACpB,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC;YACpB,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,YAAY,CAAC;SACrC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IAC9E,CAAC;IAED;;;;;;;;OAQG;IACH,oBAAoB,CAAC,IAAiC,EAAE,KAAY;QAClE,IAAI,IAGH,CAAC;QAEF,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,YAAY,EAAE;YACnC,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC;YAC3B,IAAI,GAAG;gBACL,IAAI,CAAC,KAAU;oBACb,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBAC7B,CAAC;gBACD,IAAI;oBACF,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC7B,CAAC;aACF,CAAC;SACH;aAAM,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,kBAAkB,EAAE;YAChD,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACvB,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC7C,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,CAAqB,IAAI,CAAC,QAAS,CAAC,IAAI,CAAC;YACzG,IAAI,GAAG;gBACL,IAAI,CAAC,KAAU;oBACb,MAAM,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;gBAC3B,CAAC;gBACD,IAAI;oBACF,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC1B,CAAC;aACF,CAAC;SACH;aAAM;YACL,MAAM,oDAAoD,CAAC;SAC5D;QAED,OAAO;YACL,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC3B,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;YACpD,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;YACpD,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;YACpD,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;YACpD,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;YACpD,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;YACtD,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;YACtD,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;YACxD,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;YACpD,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;YACpD,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;SACrD,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IACjD,CAAC;IAED;;;;;;;OAOG;IACH,iBAAiB,CAAC,IAA8B,EAAE,KAAY;QAC5D,OAAO;YACL,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC;YACvE,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC;SACxE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;IACrB,CAAC;IAED;;;;;;;OAOG;IACH,gBAAgB,CAAC,IAA6B,EAAE,KAAY;QAC1D,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;QAC5C,IAAI,QAAQ,EAAE;YACZ,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;SAC7D;aAAM;YACL,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAqB,QAAS,CAAC,IAAI,CAAC,CAAC;SACrE;IACH,CAAC;IAED;;;;;;;OAOG;IACH,qBAAqB,CAAC,IAAkC,EAAE,KAAY;QACpE,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAC5G,CAAC;IAED;;;;;;;OAOG;IACH,cAAc,CAAC,IAA2B,EAAE,KAAY;QACtD,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;QAE9D,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,kBAAkB,EAAE;YAC3C,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YACpD,mCAAmC;YACnC,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ;gBACnC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC;gBACxC,CAAC,CAAqB,IAAI,CAAC,MAAM,CAAC,QAAS,CAAC,IAAI,CAAC;YACnD,uCAAuC;YACvC,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;SAClC;aAAM;YACL,4BAA4B;YAC5B,0CAA0C;YAC1C,qEAAqE;YACrE,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;SAC/C;IACH,CAAC;IAED;;;;;;;;OAQG;IACH,aAAa,CAAC,IAA0B,EAAE,KAAY;QACpD,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC3C,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;QAC9D,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;QAC1D,4BAA4B;IAC9B,CAAC;IAED;;;;;;;OAOG;IACH,kBAAkB,CAAC,IAA+B,EAAE,KAAY;QAC9D,IAAI,IAAI,CAAC;QACT,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE;YACnC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SAC/B;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,UAAU;IACV,gBAAgB,CAAC,IAA6B,EAAE,KAAY;QAC1D,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IACD,eAAe,CAAC,IAA4B,EAAE,KAAY;QACxD,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IACD,SAAS,CAAC,IAAsB,EAAE,KAAY;QAC5C,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IACD,KAAK,CAAC,IAAkB,EAAE,KAAY;QACpC,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IACD,gBAAgB,CAAC,IAA6B,EAAE,KAAY;QAC1D,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IAED,QAAQ;IACR,eAAe,CAAC,IAA4B,EAAE,KAAY;QACxD,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IACD,eAAe,CAAC,IAA4B,EAAE,KAAY;QACxD,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IACD,wBAAwB,CAAC,IAAqC,EAAE,KAAY;QAC1E,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IAED,KAAK;IACL,aAAa,CAAC,IAA0B,EAAE,KAAY;QACpD,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IACD,iBAAiB,CAAC,IAA8B,EAAE,KAAY;QAC5D,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IACD,YAAY,CAAC,IAAyB,EAAE,KAAY;QAClD,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IAED,KAAK;IACL,WAAW,CAAC,IAAwB,EAAE,KAAY;QAChD,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IACD,YAAY,CAAC,IAAyB,EAAE,KAAY;QAClD,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IACD,eAAe,CAAC,IAA4B,EAAE,KAAY;QACxD,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IAED,cAAc,CAAC,IAA2B,EAAE,KAAY;QACtD,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IACD,eAAe,CAAC,IAA4B,EAAE,KAAY;QACxD,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IACD,uBAAuB,CAAC,IAAoC,EAAE,KAAY;QACxE,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IACD,kBAAkB,CAAC,IAA+B,EAAE,KAAY;QAC9D,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IAED,WAAW;IACX,iBAAiB,CAAC,IAA8B,EAAE,KAAY;QAC5D,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IACD,eAAe,CAAC,IAA4B,EAAE,KAAY;QACxD,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IACD,sBAAsB,CAAC,IAAmC,EAAE,KAAY;QACtE,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IACD,wBAAwB,CAAC,IAAqC,EAAE,KAAY;QAC1E,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IAED,WAAW;IACX,eAAe,CAAC,IAA4B,EAAE,KAAY;QACxD,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IACD,sBAAsB,CAAC,IAAmC,EAAE,KAAY;QACtE,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IACD,wBAAwB,CAAC,IAAqC,EAAE,KAAY;QAC1E,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;IACD,oBAAoB,CAAC,IAAiC,EAAE,KAAY;QAClE,MAAM,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;IAC3B,CAAC;CACF;AAhgCD,0BAggCC;;;;;;;;;;;;;;;AC7gCD;;;;;GAKG;AACH;IAKE;;;;OAIG;IACH;QATiB,iBAAY,GAAO,EAAE,CAAC;QACtB,oBAAe,GAAO,EAAE,CAAC;QACzB,kBAAa,GAAO,EAAE,CAAC;IAOzB,CAAC;IAEhB;;;;;;OAMG;IACO,iBAAiB;QACzB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED;;;;;;OAMG;IACO,oBAAoB;QAC5B,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED;;;;;;;OAOG;IACO,kBAAkB,CAAC,IAAS;QACpC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,EAAE,CAAC;IAC9C,CAAC;IAED;;;;;;;OAOG;IACO,aAAa,CAAC,MAAM;QAC5B,OAAO,MAAM,KAAK,IAAI,CAAC,YAAY,CAAC;IACtC,CAAC;IAED;;;;;;;OAOG;IACO,gBAAgB,CAAC,MAAM;QAC/B,OAAO,MAAM,KAAK,IAAI,CAAC,eAAe,CAAC;IACzC,CAAC;IAED;;;;;;;OAOG;IACO,cAAc,CAAC,MAAM;QAC7B,OAAO,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC;IAC/D,CAAC;CACF;AAjFD,+BAiFC;;;;;;;;;;;;;;;ACvFD,MAAM,iBAAiB,GAAG,EAAE,CAAC;AAG7B,kBAAe;IACX,iBAAiB;CACpB;;;;;;;;;;;;;;;ACHD,qEAA4B;AAGnB,gBAHF,eAAK,CAGE;AAFd,2EAAgC;AAIhC;;;;;;GAMG;AACH,QAAwB,SAAQ,iBAAO;IAKrC;;;;;;OAMG;IACH,YAAY,OAAe,EAAE,IAAa;QACxC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,IAAI,eAAK,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QAC/C,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACxC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAE5B,0BAA0B;QAC1B,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC1B,IAAI,CAAC,2BAA2B,EAAE,CAAC;IACrC,CAAC;IAED;;;;;;;OAOG;IACK,IAAI,CAAC,OAAe,EAAE,IAAa;QACzC,IAAI,CAAC,WAAW,GAAG,IAAI,eAAK,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QAC/C,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAExC,0BAA0B;QAC1B,IAAI,IAAI;YAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACpF,IAAI,CAAC,2BAA2B,EAAE,CAAC;IACrC,CAAC;IAED;;;;;OAKG;IACK,2BAA2B;QACjC,MAAM,MAAM,GAAG;YACb,OAAO;YACP,UAAU;YACV,WAAW;YACX,YAAY;YACZ,aAAa;YACb,SAAS;YACT,kBAAkB;YAClB,SAAS;YACT,kBAAkB;YAClB,MAAM;YACN,QAAQ;YACR,QAAQ;YACR,GAAG;YACH,QAAQ;YACR,KAAK;YACL,UAAU;YACV,QAAQ;YACR,MAAM;YACN,QAAQ;YACR,OAAO;YACP,KAAK;YACL,SAAS;YACT,UAAU;YACV,cAAc;YACd,WAAW;YACX,SAAS;YACT,QAAQ;YACR,MAAM;YACN,IAAI;YACJ,SAAS;YACT,IAAI;YACJ,MAAM;YACN,MAAM;YACN,KAAK;YACL,IAAI;YACJ,OAAO;YACP,MAAM;YACN,GAAG;YACH,GAAG;SACJ,CAAC;QAEF,cAAc;QACd,0BAA0B;QAE1B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClF,CAAC;IAED;;;;;;OAMG;IACI,OAAO,CAAC,GAAgB;QAC7B,IAAI,OAAO,GAAG,KAAK,QAAQ;YAAE,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,IAAY;QACxB,IAAI,IAAI;YAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtF,CAAC;IAED;;;;;OAKG;IACI,YAAY;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED;;;;;;;OAOG;IACI,UAAU,CAAC,KAAY,EAAE,GAAgB;QAC9C,IAAI,KAAK,YAAY,eAAK,EAAE;YAC1B,IAAI,OAAO,GAAG,KAAK,QAAQ;gBAAE,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC9B;QACD,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;IACrD,CAAC;IAED;;;;;;OAMG;IACI,WAAW,CAAC,IAAY;QAC7B,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAED;;;;OAIG;IACI,KAAK;QACV,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAClD,IAAI,CAAC,WAAW,GAAG,IAAI,eAAK,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QAC/C,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEzC,0BAA0B;QAC1B,IAAI,IAAI,CAAC,eAAe,EAAE;YACxB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAC/C,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAC/E,CAAC;SACH;QACD,IAAI,CAAC,2BAA2B,EAAE,CAAC;IACrC,CAAC;CACF;AA/KD,qBA+KC;;;;;;;;;;;;;;;AC7LD,gGAA8C;AAE9C;IAOE;;;;;;;OAOG;IACH,YAAY,IAAY,EAAE,MAAgC,EAAE,QAA0B;QAd9E,aAAQ,GAAW,OAAO,CAAC;QAC3B,kBAAa,GAAiD,IAAI,GAAG,EAAE,CAAC;QACxE,eAAU,GAA6B,IAAI,CAAC;QAC5C,wBAAmB,GAAiB,IAAI,CAAC;QACzC,iBAAY,GAAY,EAAE,CAAC;QAWjC,0DAA0D;QAC1D,IAAI,IAAI,KAAK,MAAM,EAAE;YACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,EAAE,CAAC;YAC/B,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;YACzB,gBAAgB;YAEhB,IAAI;YACJ,uCAAuC;YACvC,0CAA0C;YAC1C,MAAM;YAEN,2BAA2B;YAC3B,gDAAgD;YAEhD,OAAO,IAAI,CAAC;SACb;QAED,4CAA4C;QAC5C,OAAO,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC7D,CAAC;IAED;;;;;;;;OAQG;IACK,sBAAsB,CAAC,IAAY,EAAE,MAAgC,EAAE,QAA0B;QACvG,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC;QAC5C,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;QACtB,KAAK,CAAC,aAAa,GAAG,IAAI,GAAG,EAAE,CAAC;QAChC,KAAK,CAAC,UAAU,GAAG,MAAM,CAAC;QAC1B,KAAK,CAAC,mBAAmB,GAAG,IAAI,CAAC;QACjC,KAAK,CAAC,YAAY,GAAG,QAAQ,IAAI,EAAE,CAAC;QAEpC,2BAA2B;QAC3B,iCAAiC;QACjC,sCAAsC;QACtC,IAAI;QACJ,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;;;OAKG;IACK,gBAAgB,CAAC,QAAyB;QAChD,IAAI,QAAQ,EAAE;YACZ,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACjG,8EAA8E;SAC/E;IACH,CAAC;IAED;;;;;;OAMG;IACI,yBAAyB,CAAC,aAAqB;QACpD,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,SAAS,CAAC;IAC3C,CAAC;IAED;;;;;;OAMG;IACI,gBAAgB,CAAC,aAAqB;QAC3C,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAC/C,CAAC;IAED;;;;;;OAMG;IACI,gBAAgB,CAAC,aAAqB;QAC3C,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC;IACrC,CAAC;IAED;;;;;;OAMG;IACI,OAAO,CAAC,aAAqB;QAClC,iDAAiD;QACjD,wDAAwD;QACxD,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;QACrC,IAAI,QAAQ;YAAE,OAAO,QAAQ,CAAC,KAAK,CAAC;QACpC,MAAM,IAAI,cAAc,CAAC,GAAG,aAAa,iBAAiB,CAAC,CAAC;IAC9D,CAAC;IAED;;;;;;;OAOG;IACI,OAAO,CAAC,aAAqB,EAAE,KAAU;QAC9C,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;QACrC,IAAI,QAAQ,EAAE;YACZ,IAAI,QAAQ,CAAC,OAAO,KAAK,OAAO;gBAAE,MAAM,IAAI,SAAS,CAAC,kCAAkC,CAAC,CAAC;YAC1F,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;YACvB,OAAO,QAAQ,CAAC,KAAK,CAAC;SACvB;QACD,MAAM,IAAI,cAAc,CAAC,GAAG,aAAa,iBAAiB,CAAC,CAAC;IAC9D,CAAC;IAED;;;;;;OAMG;IACI,UAAU,CAAC,aAAqB;QACrC,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;QACrC,IAAI,QAAQ,EAAE;YACZ,OAAO,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;SAC/E;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;;;;OAMG;IACI,GAAG,CAAC,aAAqB,EAAE,KAAU,EAAE,eAA0B,EAAE,eAA0B;QAClG,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,aAAa,EAAE,KAAK,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC;IAC/F,CAAC;IAED;;;;;;OAMG;IACI,QAAQ,CAAC,aAAqB,EAAE,IAAc,EAAE,eAA0B,EAAE,eAA0B;QAC3G,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,aAAa,EAAE,IAAI,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC;IACnG,CAAC;IAED;;;;;;;OAOG;IACI,GAAG,CAAC,aAAqB,EAAE,KAAU,EAAE,eAA0B,EAAE,eAA0B;QAClG,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,aAAa,EAAE,KAAK,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC;IAC5F,CAAC;IAED;;;;;;OAMG;IACI,KAAK,CAAC,aAAqB,EAAE,KAAU,EAAE,eAA0B;QACxE,oCAAoC;QACpC,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC;IAC7E,CAAC;IAED;;;;;;OAMG;IACK,8BAA8B,CAAC,KAA+B;QACpE,IAAI,KAAK,EAAE;YACT,MAAM,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;YAClE,IAAI,KAAK,KAAK,UAAU,IAAI,KAAK,KAAK,MAAM;gBAAE,OAAO,KAAK,CAAC,UAAU,IAAI,IAAI,CAAC;YAC9E,OAAO,KAAK,CAAC,8BAA8B,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;SAC/D;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;;OAQG;IACK,qBAAqB,CAC3B,QAAyB,EACzB,aAAqB,EACrB,KAAU,EACV,eAA0B,EAC1B,eAA0B;QAE1B,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE;YACzC,MAAM,IAAI,WAAW,CAAC,qCAAqC,aAAa,6BAA6B,CAAC,CAAC;SACxG;QAED,MAAM,QAAQ,GAAG;YACf,OAAO,EAAE,QAAQ;YACjB,KAAK,EAAE,KAAK,KAAK,wBAAc,CAAC,iBAAiB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK;SACtE,CAAC;QACF,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;QAEhD,MAAM,KAAK,GAAG,IAAI,CAAC;QACnB,IAAI,GAAG,GAAG,KAAK,CAAC,EAAE;YAChB,MAAM,gBAAgB,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC;YAC9C,gBAAgB,CAAC,KAAK,GAAG,KAAK,CAAC;YAC/B,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC;YAEzD,IAAI,eAAe,IAAI,OAAO,eAAe,KAAK,UAAU;gBAAE,eAAe,EAAE,CAAC;YAChF,OAAO,gBAAgB,CAAC;QAC1B,CAAC,CAAC;QACF,IAAI,QAAQ,KAAK,OAAO,EAAE;YACxB,GAAG,GAAG,KAAK,CAAC,EAAE;gBACZ,MAAM,IAAI,SAAS,CAAC,iCAAiC,CAAC,CAAC;YACzD,CAAC,CAAC;SACH;QACD,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,aAAa,EAAE;YACzC,YAAY,EAAE,IAAI;YAClB,UAAU,EAAE,IAAI;YAChB,SAAS;YACT,kBAAkB;YAClB,GAAG;gBACD,IAAI,eAAe,IAAI,OAAO,eAAe,KAAK,UAAU;oBAAE,eAAe,EAAE,CAAC;gBAChF,OAAO,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YAChD,CAAC;YACD,GAAG;SACJ,CAAC,CAAC;QAEH,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;;;;;OAQG;IACK,wBAAwB,CAC9B,QAA4B,EAC5B,aAAqB,EACrB,KAAU,EACV,eAA0B,EAC1B,eAA0B;QAE1B,MAAM,iBAAiB,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAChE,IAAI,iBAAiB,EAAE;YACrB,MAAM,OAAO,GAAG,iBAAiB,CAAC,OAAO,CAAC;YAC1C,IAAI,OAAO,KAAK,KAAK,IAAI,OAAO,KAAK,OAAO;gBAC1C,MAAM,WAAW,CAAC,qCAAqC,aAAa,6BAA6B,CAAC,CAAC;YAErG,mBAAmB;YACnB,IAAI,KAAK,KAAK,wBAAc,CAAC,iBAAiB,EAAE;gBAC9C,iBAAiB,CAAC,OAAO,GAAG,QAAQ,CAAC;gBACrC,iBAAiB,CAAC,KAAK,GAAG,KAAK,CAAC;aACjC;YAED,OAAO,iBAAiB,CAAC;SAC1B;aAAM;YACL,IAAI,IAAI,CAAC,QAAQ,KAAK,UAAU,IAAI,IAAI,CAAC,QAAQ,KAAK,MAAM,EAAE;gBAC5D,MAAM,QAAQ,GAAG;oBACf,OAAO,EAAE,QAAQ;oBACjB,KAAK,EAAE,KAAK,KAAK,wBAAc,CAAC,iBAAiB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK;iBACtE,CAAC;gBACF,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;gBAEhD,MAAM,KAAK,GAAG,IAAI,CAAC;gBACnB,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,aAAa,EAAE;oBACzC,YAAY,EAAE,IAAI;oBAClB,UAAU,EAAE,IAAI;oBAChB,SAAS;oBACT,kBAAkB;oBAClB,GAAG;wBACD,IAAI,eAAe,IAAI,OAAO,eAAe,KAAK,UAAU;4BAAE,eAAe,EAAE,CAAC;wBAChF,OAAO,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;oBAChD,CAAC;oBACD,GAAG,CAAC,KAAK;wBACP,MAAM,gBAAgB,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC;wBAC9C,gBAAgB,CAAC,KAAK,GAAG,KAAK,CAAC;wBAC/B,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC;wBAEzD,IAAI,eAAe,IAAI,OAAO,eAAe,KAAK,UAAU;4BAAE,eAAe,EAAE,CAAC;wBAChF,OAAO,gBAAgB,CAAC;oBAC1B,CAAC;iBACF,CAAC,CAAC;gBACH,OAAO,QAAQ,CAAC;aACjB;iBAAM;gBACL,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;oBAC7B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,CAAC;iBACtE;gBACD,IAAI,IAAI,CAAC,mBAAmB,EAAE;oBAC5B,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,wBAAwB,CAChE,QAAQ,EACR,aAAa,EACb,KAAK,EACL,eAAe,EACf,eAAe,CAChB,CAAC;oBACF,IAAI,QAAQ,EAAE;wBACZ,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;wBAChD,OAAO,QAAQ,CAAC;qBACjB;oBACD,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;iBAClD;qBAAM;oBACL,MAAM,IAAI,KAAK,CAAC,yBAAyB,QAAQ,OAAO,CAAC,CAAC;iBAC3D;aACF;SACF;IACH,CAAC;CACF;AAjWD,wBAiWC","file":"jsvm.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsvm\"] = factory();\n\telse\n\t\troot[\"jsvm\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","import * as ESTree from \"estree\";\nimport CONSTANT_TABLE from \"./constant_table\";\nimport Scope from \"./scope\";\nimport Break_Signal from \"./break_signal\";\n// import Stack from './stack';\n\n/**\n * @description 语法节点对应的执行映射类\n * @description 可以使用for of，TS会翻译为for\n *\n * @export\n * @class AST_Map\n */\nexport default class AST_Map extends Break_Signal {\n  protected WalkCount: number = 0;\n  // protected ObjectPropertyAuxiliaryStack = new Stack();\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * @description 递归解释执行AST的分步函数\n   *\n   * @param {ESTree.Node} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  walk(node: ESTree.Node, scope: Scope, ...args: any[]) {\n    this.WalkCount++;\n    return this[node.type as string](node, scope, ...args);\n  }\n\n  /**\n   * @description AST的根节点 从此处开始执行 body包含一系列的语句\n   *\n   * @param {ESTree.Program} program\n   * @param {Scope} scope\n   * @memberof AST_Map\n   */\n  Program(program: ESTree.Program, scope: Scope) {\n    for (const node of program.body) this.walk(node, scope);\n  }\n\n  /**\n   * @description 标识符 返回可操作的空间位，若不存在该标识符则抛出错误\n   *\n   * @param {ESTree.Identifier} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  Identifier(node: ESTree.Identifier, scope: Scope) {\n    return scope.__get__(node.name);\n  }\n\n  /**\n   * @description 字面量 直接返回\n   *\n   * @param {ESTree.Literal} node\n   * @param {Scope} scope\n   * @returns {*}\n   * @memberof AST_Map\n   */\n  Literal(node: ESTree.Literal, scope: Scope): any {\n    return (<ESTree.RegExpLiteral>node).regex\n      ? new RegExp((<ESTree.RegExpLiteral>node).regex.pattern, (<ESTree.RegExpLiteral>node).regex.flags)\n      : node.value;\n  }\n\n  /**\n   * @description 块声明 包含一系列的语句， 大括号{}包含的语句\n   *\n   * @param {ESTree.BlockStatement} block\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  BlockStatement(block: ESTree.BlockStatement, scope: Scope) {\n    // @todo 此处可以判定是否需要创建作用域，需要Scope内部支持\n    let new_scope = new Scope(\"block\", scope);\n    for (const node of block.body) {\n      const result = this.walk(node, new_scope);\n      if (this.isBreakSignal(result) || this.isContinueSignal(result) || this.isReturnSignal(result)) {\n        return result;\n      }\n    }\n  }\n\n  /**\n   * @description 空的语句，例如一个 ;\n   *\n   * @param {ESTree.EmptyStatement} node\n   * @param {Scope} scope\n   * @memberof AST_Map\n   */\n  EmptyStatement(node: ESTree.EmptyStatement, scope: Scope) {\n    /* do nothing */\n  }\n\n  /**\n   * @description debugger语句\n   *\n   * @param {ESTree.DebuggerStatement} node\n   * @param {Scope} scope\n   * @memberof AST_Map\n   */\n  DebuggerStatement(node: ESTree.DebuggerStatement, scope: Scope) {\n    debugger;\n  }\n\n  /**\n   * @description 一个表达式语句，内部包含一个表达式，直接执行内部的表达式\n   *\n   * @param {ESTree.ExpressionStatement} node\n   * @param {Scope} scope\n   * @memberof AST_Map\n   */\n  ExpressionStatement(node: ESTree.ExpressionStatement, scope: Scope) {\n    this.walk(node.expression, scope);\n  }\n\n  /**\n   * @description return语句， 如果参数为表达式，则继续执行\n   *\n   * @param {ESTree.ReturnStatement} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  ReturnStatement(node: ESTree.ReturnStatement, scope: Scope) {\n    return this.createReturnSignal(node.argument ? this.walk(node.argument, scope) : undefined);\n  }\n\n  /**\n   * @todo 未实现，待调研，底层语言可使用goto实现\n   * @description 标签标记语法, 非常罕见的一个JavaScript语法 参见：{@link https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/label}\n   *\n   * @param {ESTree.LabeledStatement} node\n   * @param {Scope} scope\n   * @memberof AST_Map\n   */\n  LabeledStatement(node: ESTree.LabeledStatement, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n\n  /**\n   * @description break语句，跳出当前正在执行的循环体或者switch\n   * @description 配合LabeledStatement可以实现非当前执行体的跳出，但该功能目前未实现\n   *\n   * @param {ESTree.BreakStatement} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  BreakStatement(node: ESTree.BreakStatement, scope: Scope) {\n    return this.createBreakSignal();\n  }\n\n  /**\n   * @description continue语句，跳出本次循环\n   * @description 配合LabeledStatement可以实现非当前执行体的当次跳出，但该功能目前未实现\n   *\n   * @param {ESTree.ContinueStatement} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  ContinueStatement(node: ESTree.ContinueStatement, scope: Scope) {\n    return this.createContinueSignal();\n  }\n\n  /**\n   * @description if 语句，首先判断test条件是否成立，如果成立执行consequent，否则执行alternate\n   * 作用域在子集的BlockStatement中创建\n   *\n   * @param {ESTree.IfStatement} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  IfStatement(node: ESTree.IfStatement, scope: Scope) {\n    if (this.walk(node.test, scope)) return this.walk(node.consequent, scope);\n    else if (node.alternate) return this.walk(node.alternate, scope);\n  }\n\n  /**\n   * @description switch语句，多分支判断语句\n   *\n   * @param {ESTree.SwitchStatement} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  SwitchStatement(node: ESTree.SwitchStatement, scope: Scope) {\n    // 执行discriminant(Expression)得到运算结果，将结果挨个与cases中的SwitchCase中的test执行结果比对(使用严格等于)\n    // 若存在第n个SwitchCase的test执行结果与discriminant的结果匹配，则执行此SwitchStatement中的consequent([ Statement ])\n    // 若该SwitchStatement中的consequent存在break语句，则跳过后续执行，直接return\n    // 若该SwitchStatement中的consequent不存在break语句，则执行第n+1个SwitchCase\n    // 循环执行以上两个步骤到default(test==null)语句\n    // 若不存在，则执行default(test==null)语句\n    const discriminant = this.walk(node.discriminant, scope);\n    const new_scope = new Scope(\"switch\", scope);\n\n    let matched = false;\n    for (const $case of node.cases) {\n      // 进行匹配相应的 case\n      if (!matched && (!$case.test || discriminant === this.walk($case.test, new_scope))) {\n        matched = true;\n      }\n\n      if (matched) {\n        const result = this.walk($case, new_scope);\n\n        if (this.isBreakSignal(result)) {\n          break;\n        } else if (this.isContinueSignal(result) || this.isReturnSignal(result)) {\n          return result;\n        }\n      }\n    }\n  }\n\n  /**\n   * @description switch 的 case 语句\n   *\n   * @param {ESTree.SwitchCase} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  SwitchCase(node: ESTree.SwitchCase, scope: Scope) {\n    // test == null的case为default语句\n    // SwitchCase不单独创建作用域，共享Switch创建的作用域\n    for (const stmt of node.consequent) {\n      const result = this.walk(stmt, scope);\n      if (this.isBreakSignal(result) || this.isContinueSignal(result) || this.isReturnSignal(result)) {\n        return result;\n      }\n    }\n  }\n\n  /**\n   * @description with 语句， ES5严格模式下会被禁用\n   * 实现目标为严格模式，取消with语句支持 2018.06.25\n   *\n   * @param {ESTree.WithStatement} node\n   * @param {Scope} scope\n   * @memberof AST_Map\n   */\n  WithStatement(node: ESTree.WithStatement, scope: Scope) {\n    // 按照原则此处的Scope类型应该为with，但是声明为with需要修改\n    // const new_scope = new Scope('function', scope);\n    // const injectObj = this.walk(node.object, scope);\n    // Object.keys(injectObj).forEach(key => {\n    //     new_scope.var(key, injectObj[key]);\n    // });\n    // this.walk(node.body, new_scope);\n    throw SyntaxError(\"Strict mode code may not include a with statement\");\n  }\n\n  /**\n   * @description throw 语句\n   *\n   * @param {ESTree.ThrowStatement} node\n   * @param {Scope} scope\n   * @memberof AST_Map\n   */\n  ThrowStatement(node: ESTree.ThrowStatement, scope: Scope) {\n    throw this.walk(node.argument, scope);\n  }\n\n  /**\n   * @description try catch finally结构语句\n   *\n   * @param {ESTree.TryStatement} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  TryStatement(node: ESTree.TryStatement, scope: Scope) {\n    // 如果handler是null那么finalizer必然存在\n    try {\n      return this.walk(node.block, new Scope(\"try\", scope));\n    } catch (err) {\n      if (node.handler) {\n        const param = <ESTree.Identifier>node.handler.param;\n        const new_scope = new Scope(\"catch\", scope);\n        new_scope.const(param.name, err);\n        return this.walk(node.handler, new_scope);\n      } else {\n        throw err;\n      }\n    } finally {\n      if (node.finalizer) {\n        // 增加了判断 如果finally中有返回信号才返回 否则不返回\n        const result = this.walk(node.finalizer, new Scope(\"finally\", scope));\n        if (this.isReturnSignal(result)) return result;\n      }\n    }\n  }\n\n  /**\n   * @description catch子句\n   *\n   * @param {ESTree.CatchClause} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  CatchClause(node: ESTree.CatchClause, scope: Scope) {\n    return this.walk(node.body, scope);\n  }\n\n  /**\n   * @description while语句\n   *\n   * @param {ESTree.WhileStatement} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  WhileStatement(node: ESTree.WhileStatement, scope: Scope) {\n    while (this.walk(node.test, scope)) {\n      const new_scope = new Scope(\"while\", scope);\n      const result = this.walk(node.body, new_scope);\n\n      if (this.isBreakSignal(result)) {\n        break;\n      } else if (this.isContinueSignal(result)) {\n        continue;\n      } else if (this.isReturnSignal(result)) {\n        return result;\n      }\n    }\n  }\n\n  /**\n   * @description do while 语句\n   *\n   * @param {ESTree.DoWhileStatement} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  DoWhileStatement(node: ESTree.DoWhileStatement, scope: Scope) {\n    do {\n      const new_scope = new Scope(\"dowhile\", scope);\n      const result = this.walk(node.body, new_scope);\n      if (this.isBreakSignal(result)) {\n        break;\n      } else if (this.isContinueSignal(result)) {\n        continue;\n      } else if (this.isReturnSignal(result)) {\n        return result;\n      }\n    } while (this.walk(node.test, scope));\n  }\n\n  /**\n   * @description for 循环语句\n   *\n   * @param {ESTree.ForStatement} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  ForStatement(node: ESTree.ForStatement, scope: Scope) {\n    // @todo 以下获取循环初始化变量的代码可能是无用的\n    const initKeys: string[] = [];\n    if (node.init && node.init.type && node.init.type === \"VariableDeclaration\" && node.init.kind === \"let\") {\n      node.init.declarations.forEach(vd => {\n        if ((<ESTree.Identifier>vd.id).name) initKeys.push((<ESTree.Identifier>vd.id).name);\n      });\n    }\n\n    for (\n      const new_scope = new Scope(\"for\", scope), init_val = node.init ? this.walk(node.init, new_scope) : null;\n      node.test ? this.walk(node.test, new_scope) : true;\n      node.update ? this.walk(node.update, new_scope) : void 0\n    ) {\n      const bodyScope = new Scope(\"for_body\", new_scope);\n      const result = this.walk(node.body, bodyScope);\n\n      // @todo 循环复制变量到当前循环体的作用域中可能是无用的\n      // initKeys.forEach(key => bodyScope.let(key, new_scope[key]));\n      initKeys.forEach(key => bodyScope.let(key, new_scope.__get__(key)));\n\n      if (this.isBreakSignal(result)) {\n        break;\n      } else if (this.isContinueSignal(result)) {\n        continue;\n      } else if (this.isReturnSignal(result)) {\n        return result;\n      }\n    }\n  }\n\n  /**\n   * @description for in 语句\n   *\n   * @param {ESTree.ForInStatement} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  ForInStatement(node: ESTree.ForInStatement, scope: Scope) {\n    let kind = \"var\",\n      name;\n    if (node.left.type === \"Identifier\") {\n      name = node.left.name;\n    } else {\n      const decl = (<ESTree.VariableDeclaration>node.left).declarations[0];\n      name = (<ESTree.Identifier>decl.id).name;\n      kind = (<ESTree.VariableDeclaration>node.left).kind;\n    }\n\n    for (const value in this.walk(node.right, scope)) {\n      const new_scope = new Scope(\"forin\", scope);\n      new_scope[kind](name, value);\n      const result = this.walk(node.body, new_scope);\n      if (this.isBreakSignal(result)) {\n        break;\n      } else if (this.isContinueSignal(result)) {\n        continue;\n      } else if (this.isReturnSignal(result)) {\n        return result;\n      }\n    }\n  }\n\n  /**\n   * @description 函数声明\n   *\n   * @param {ESTree.FunctionDeclaration} node\n   * @param {Scope} scope\n   * @memberof AST_Map\n   */\n  FunctionDeclaration(node: ESTree.FunctionDeclaration, scope: Scope) {\n    // FunctionDeclaration和FunctionExpression的唯一不同是FunctionDeclaration中的id(函数名标识符)\n    // 不能为null(当函数为export default function中的函数时，可以为空)，而FunctionExpression的id可以为null\n    // 当前实现：id如果为空，直接抛出语法异常\n    const func = this.FunctionExpression(<any>node, scope);\n\n    let name = \"\";\n    if (node && node.id && node.id.name) name = node.id.name;\n    else throw new SyntaxError(\"Function must have a name as its identifier\");\n\n    scope.function(name, func);\n  }\n\n  /**\n   * @description 函数表达式，几乎和函数声明的逻辑一致\n   *\n   * @param {ESTree.FunctionExpression} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  FunctionExpression(node: ESTree.FunctionExpression, scope: Scope) {\n    const self = this;\n    const func = function(...args) {\n      const new_scope = new Scope(\"function\", scope);\n      for (let i = 0; i < node.params.length; i++) {\n        const { name } = <ESTree.Identifier>node.params[i];\n        new_scope.var(name, args[i]);\n      }\n      new_scope.const(\"this\", this);\n      new_scope.const(\"arguments\", arguments);\n      // 在当前函数环境注入函数名称\n      let name = \"\";\n      if (node && node.id && node.id.name) {\n        name = node.id.name;\n        new_scope.function(name, func);\n      }\n\n      const result = self.walk(node.body, new_scope);\n      if (self.isReturnSignal(result)) {\n        return result.data;\n      }\n    };\n\n    return func;\n  }\n\n  /**\n   * @description 变量声明语句\n   *\n   * @param {ESTree.VariableDeclaration} node\n   * @param {Scope} scope\n   * @memberof AST_Map\n   */\n  VariableDeclaration(node: ESTree.VariableDeclaration, scope: Scope) {\n    const kind = node.kind;\n    for (const declartor of node.declarations) {\n      // 声明const类型没有初始化抛出异常\n      if (kind === \"const\" && !declartor.init) throw new SyntaxError(\"Missing initializer in const declaration\");\n\n      const { name } = <ESTree.Identifier>declartor.id;\n\n      const value = declartor.init === null ? CONSTANT_TABLE.NON_EXISTENT_INIT : this.walk(declartor.init!, scope);\n      scope[kind](name, value);\n    }\n  }\n\n  /**\n   * @description 变量声明的子节点，暂时没有用到，该节点的相关实现都写在了VariableDeclaration节点中\n   *\n   * @param {ESTree.VariableDeclarator} node\n   * @param {Scope} scope\n   * @memberof AST_Map\n   */\n  VariableDeclarator(node: ESTree.VariableDeclarator, scope: Scope) {\n    // VariableDeclarator的父节点类型必为VariableDeclaration，相关操作已经在VariableDeclaration中直接执行了，本函数并没有调用\n  }\n\n  /**\n   * @description this 语句 ES5规定在非严格模式下，this为global对象或者所属的对象，在严格模式下，只能是null或者所属对象\n   * @description 小程序目前打开ES6转译ES5就会默认启用严格模式，所以此处没有找到this直接返回null\n   *\n   * @param {ESTree.ThisExpression} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  ThisExpression(node: ESTree.ThisExpression, scope: Scope) {\n    return scope.__has_variable_in_chain__(\"this\") ? scope.__get__(\"this\") : null;\n  }\n\n  /**\n   * @description 数组表达式 []\n   *\n   * @param {ESTree.ArrayExpression} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  ArrayExpression(node: ESTree.ArrayExpression, scope: Scope) {\n    const target = [];\n    // scope.const('[[TARGET]]', target);\n    node.elements.forEach(item => {\n      target.push(this.walk(item, scope, target) as never);\n    });\n    // scope.__remove__('[[TARGET]]');\n    return target;\n  }\n\n  /**\n   * @description {} 对象表达式，循环遍历属性值并赋值为一个对象属性，最后返回该对象\n   *\n   * @param {ESTree.ObjectExpression} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  ObjectExpression(node: ESTree.ObjectExpression, scope: Scope) {\n    // 方案 1：在当前Scope注入一个变量名唯一的目标object，其他property节点添加属性到该\bObject，然后取出该值，\b在当前Scope删除后返回该值，避免使用Object.assign\n    const target = {};\n    const auxiliaryGetterMap = {};\n    const auxiliarySetterMap = {};\n    // scope.const('[[TARGET]]', target);\n    node.properties.forEach(property => this.walk(property, scope, target, auxiliaryGetterMap, auxiliarySetterMap));\n    // scope.__remove__('[[TARGET]]');\n\n    const getterKeys = Object.keys(auxiliaryGetterMap);\n    const setterKeys = Object.keys(auxiliarySetterMap);\n    if (getterKeys.length !== 0 || setterKeys.length !== 0) {\n      const keys = [...new Set(getterKeys.concat(...setterKeys))];\n      for (let i = 0; i < keys.length; i++) {\n        Object.defineProperty(target, keys[i], { set: auxiliarySetterMap[keys[i]], get: auxiliaryGetterMap[keys[i]] });\n      }\n    }\n\n    return target;\n\n    // 方案 2：直接使用Object.assign合并各个字句返回的对象\n    // return Object.assign({}, ...node.properties.map(property => this.walk(property, scope)));\n  }\n\n  /**\n   * @description ObjectExpression节点中properties的类型\n   *\n   * @param {ESTree.Property} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  Property(\n    node: ESTree.Property,\n    scope: Scope,\n    target: Object,\n    auxiliaryGetterMap: Object,\n    auxiliarySetterMap: Object\n  ) {\n    // 注释的部分取决于ObjectExpression的实现方式\n    const kind = node.kind;\n    // const object = {};\n    let key;\n    if (node.key.type === \"Literal\") {\n      key = node.key.value;\n    } else if (node.key.type === \"Identifier\") {\n      key = node.key.name;\n    } else {\n      throw new Error(\"Key of object must be Literal or Identifier, please check your code of ObjectExpression\");\n    }\n\n    // const target = scope.__get__('[[TARGET]]');\n    const value = this.walk(node.value, scope);\n    if (kind === \"init\") {\n      // object[key] = value\n      target[key] = value;\n    } else if (kind === \"set\") {\n      // Object.defineProperty(object, key, { set: value });\n      // Object.defineProperty(target, key, { set: value });\n      auxiliarySetterMap[key] = value;\n    } else if (kind === \"get\") {\n      // Object.defineProperty(object, key, { get: value });\n      // Object.defineProperty(target, key, { get: value });\n      auxiliaryGetterMap[key] = value;\n    } else {\n      throw new Error(\"声明对象的属性必须为初始化，getter或者setter，请检查你对象声明的表达式\");\n    }\n    // return object;\n  }\n\n  /**\n   * @description  ...展开语法，当前为实验性实现\n   *\n   * @param {ESTree.SpreadElement} node\n   * @param {Scope} scope\n   * @memberof AST_Map\n   */\n  SpreadElement(node: ESTree.SpreadElement, scope: Scope, target: Object) {\n    // const target = scope.__get__('[[TARGET]]');\n    const param = this.walk(node.argument, scope);\n\n    if (Array.isArray(target)) {\n      if (param[Symbol.iterator] && typeof param[Symbol.iterator] === \"function\") {\n        const iterator = param[Symbol.iterator]();\n        let pointer;\n        while (!(pointer = iterator.next()).done) {\n          target.push(pointer.value);\n        }\n      } else {\n        throw TypeError(`${param} is not iterable`);\n      }\n    } else if (typeof target === \"object\") {\n      // Object.keys(param).forEach(key => target[key] = param[key]);\n      Object.assign(target, param);\n    }\n  }\n\n  /**\n   * @todo delete操作符实现的比较有争议，需要重构\n   * @description 一元运算符表达式\n   *\n   * @param {ESTree.UnaryExpression} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  UnaryExpression(node: ESTree.UnaryExpression, scope: Scope) {\n    const that = this;\n    const typeofFunc = variable => typeof variable;\n\n    return {\n      \"-\": () => -this.walk(node.argument, scope),\n      \"+\": () => +this.walk(node.argument, scope),\n      \"!\": () => !this.walk(node.argument, scope),\n      \"~\": () => ~this.walk(node.argument, scope),\n      void: () => void this.walk(node.argument, scope),\n      typeof: () => {\n        if (node.argument.type === \"Identifier\") {\n          if (!scope.__has_variable_in_chain__(node.argument.name)) return \"undefined\";\n          return typeofFunc(that.walk(node.argument, scope));\n        } else if (node.argument.type === \"MemberExpression\") {\n          const { object, property, computed } = node.argument;\n          if (computed) {\n            return typeofFunc(that.walk(object, scope)[that.walk(property, scope)]);\n          } else {\n            return typeofFunc(that.walk(object, scope)[(<ESTree.Identifier>property).name]);\n          }\n        } else {\n          return typeofFunc(that.walk(node.argument, scope));\n        }\n      },\n      delete: () => {\n        if (node.argument.type === \"MemberExpression\") {\n          const { object, property, computed } = node.argument;\n          if (computed) {\n            return delete this.walk(object, scope)[this.walk(property, scope)];\n          } else {\n            return delete this.walk(object, scope)[(<ESTree.Identifier>property).name];\n          }\n        } else if (node.argument.type === \"Identifier\") {\n          // 如果参数节点类型为一个标识符，则表明是要删除作用域中声明的变量，此处按照严格模式报错\n          throw new SyntaxError(\"Uncaught SyntaxError: Delete of an unqualified identifier in strict mode.\");\n        } else {\n          // @todo 除了参数类型为成员表达式和标识符外，其他一律返回true，需要验证是否正确\n          return true;\n        }\n      }\n    }[node.operator]();\n  }\n\n  /**\n   * @description ++ --更新表达式\n   *\n   * @param {ESTree.UpdateExpression} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  UpdateExpression(node: ESTree.UpdateExpression, scope: Scope) {\n    const { prefix, operator } = node;\n\n    if (node.argument.type === \"Identifier\") {\n      const { name } = node.argument;\n      // if (!scope.__has_variable_in_chain__(name)) throw new ReferenceError(`[name] is not defined`);\n      let variable = scope.__get__(name);\n      if (operator === \"++\") {\n        // return prefix ? ++scope[name] : scope[name]++;\n        scope.__set__(name, variable + 1);\n        return prefix ? ++variable : variable++;\n      } else {\n        // return prefix ? --scope[name] : scope[name]--;\n        scope.__set__(name, variable - 1);\n        return prefix ? --variable : variable--;\n      }\n    } else if (node.argument.type === \"MemberExpression\") {\n      const argument = node.argument;\n      const object = this.walk(argument.object, scope);\n      let property = argument.computed\n        ? this.walk(argument.property, scope)\n        : (<ESTree.Identifier>argument.property).name;\n\n      if (operator === \"++\") {\n        return prefix ? ++object[property] : object[property]++;\n      } else {\n        return prefix ? --object[property] : object[property]--;\n      }\n    } else {\n      // @todo 待验证是否有必要下列代码\n      let temp = this.walk(node.argument, scope);\n      if (operator === \"++\") {\n        return prefix ? ++temp : temp++;\n      } else {\n        return prefix ? --temp : temp--;\n      }\n    }\n  }\n\n  /**\n   * @description 二元运算符表达式\n   *\n   * @param {ESTree.BinaryExpression} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  BinaryExpression(node: ESTree.BinaryExpression, scope: Scope) {\n    return {\n      \"==\": (a, b) => a == b,\n      \"!=\": (a, b) => a != b,\n      \"===\": (a, b) => a === b,\n      \"!==\": (a, b) => a !== b,\n      \"<\": (a, b) => a < b,\n      \"<=\": (a, b) => a <= b,\n      \">\": (a, b) => a > b,\n      \">=\": (a, b) => a >= b,\n      \"<<\": (a, b) => a << b,\n      \">>\": (a, b) => a >> b,\n      \">>>\": (a, b) => a >>> b,\n      \"+\": (a, b) => a + b,\n      \"-\": (a, b) => a - b,\n      \"*\": (a, b) => a * b,\n      \"/\": (a, b) => a / b,\n      \"%\": (a, b) => a % b,\n      \"|\": (a, b) => a | b,\n      \"^\": (a, b) => a ^ b,\n      \"&\": (a, b) => a & b,\n      in: (a, b) => a in b,\n      instanceof: (a, b) => a instanceof b\n    }[node.operator](this.walk(node.left, scope), this.walk(node.right, scope));\n  }\n\n  /**\n   * @todo 实现存在问题 需要重构\n   * @description 赋值表达式\n   *\n   * @param {ESTree.AssignmentExpression} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  AssignmentExpression(node: ESTree.AssignmentExpression, scope: Scope) {\n    let $var: {\n      $set(value: any);\n      $get(): any;\n    };\n\n    if (node.left.type === \"Identifier\") {\n      const { name } = node.left;\n      $var = {\n        $set(value: any) {\n          scope.__set__(name, value);\n        },\n        $get(): any {\n          return scope.__get__(name);\n        }\n      };\n    } else if (node.left.type === \"MemberExpression\") {\n      const left = node.left;\n      const object = this.walk(left.object, scope);\n      let property = left.computed ? this.walk(left.property, scope) : (<ESTree.Identifier>left.property).name;\n      $var = {\n        $set(value: any) {\n          object[property] = value;\n        },\n        $get() {\n          return object[property];\n        }\n      };\n    } else {\n      throw `赋值表达式的左边的类型只能是Identifier或者MemberExpression，此处显然不正确`;\n    }\n\n    return {\n      \"=\": v => ($var.$set(v), v),\n      \"+=\": v => ($var.$set($var.$get() + v), $var.$get()),\n      \"-=\": v => ($var.$set($var.$get() - v), $var.$get()),\n      \"*=\": v => ($var.$set($var.$get() * v), $var.$get()),\n      \"/=\": v => ($var.$set($var.$get() / v), $var.$get()),\n      \"%=\": v => ($var.$set($var.$get() % v), $var.$get()),\n      \"<<=\": v => ($var.$set($var.$get() << v), $var.$get()),\n      \">>=\": v => ($var.$set($var.$get() >> v), $var.$get()),\n      \">>>=\": v => ($var.$set($var.$get() >>> v), $var.$get()),\n      \"|=\": v => ($var.$set($var.$get() | v), $var.$get()),\n      \"^=\": v => ($var.$set($var.$get() ^ v), $var.$get()),\n      \"&=\": v => ($var.$set($var.$get() & v), $var.$get())\n    }[node.operator](this.walk(node.right, scope));\n  }\n\n  /**\n   * @description || 和 && 的逻辑表达式\n   *\n   * @param {ESTree.LogicalExpression} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  LogicalExpression(node: ESTree.LogicalExpression, scope: Scope) {\n    return {\n      \"||\": () => this.walk(node.left, scope) || this.walk(node.right, scope),\n      \"&&\": () => this.walk(node.left, scope) && this.walk(node.right, scope)\n    }[node.operator]();\n  }\n\n  /**\n   * @description . 成员运算符\n   *\n   * @param {ESTree.MemberExpression} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  MemberExpression(node: ESTree.MemberExpression, scope: Scope) {\n    const { object, property, computed } = node;\n    if (computed) {\n      return this.walk(object, scope)[this.walk(property, scope)];\n    } else {\n      return this.walk(object, scope)[(<ESTree.Identifier>property).name];\n    }\n  }\n\n  /**\n   * @description ? : 三元运算符表达式\n   *\n   * @param {ESTree.ConditionalExpression} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  ConditionalExpression(node: ESTree.ConditionalExpression, scope: Scope) {\n    return this.walk(node.test, scope) ? this.walk(node.consequent, scope) : this.walk(node.alternate, scope);\n  }\n\n  /**\n   * @description 调用表达式\n   *\n   * @param {ESTree.CallExpression} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  CallExpression(node: ESTree.CallExpression, scope: Scope) {\n    const args = node.arguments.map(arg => this.walk(arg, scope));\n\n    if (node.callee.type === \"MemberExpression\") {\n      const object = this.walk(node.callee.object, scope);\n      // console.log('object: ', object);\n      const funcName = node.callee.computed\n        ? this.walk(node.callee.property, scope)\n        : (<ESTree.Identifier>node.callee.property).name;\n      // console.log('funcName: ', funcName);\n      return object[funcName](...args);\n    } else {\n      // console.log(node.callee);\n      // const this_val = scope.__get__('this');\n      // return this.walk(node.callee, scope).apply(this_val || null, args)\n      return this.walk(node.callee, scope)(...args);\n    }\n  }\n\n  /**\n   * @todo 实现是否存在问题有待商榷\n   * @description new 运算符表达式\n   *\n   * @param {ESTree.NewExpression} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  NewExpression(node: ESTree.NewExpression, scope: Scope) {\n    const func = this.walk(node.callee, scope);\n    const args = node.arguments.map(arg => this.walk(arg, scope));\n    return new (func.bind.apply(func, [null].concat(args)))();\n    // return new func(...args);\n  }\n\n  /**\n   * @description , 逗号运算符组成的序列表达式\n   *\n   * @param {ESTree.SequenceExpression} node\n   * @param {Scope} scope\n   * @returns\n   * @memberof AST_Map\n   */\n  SequenceExpression(node: ESTree.SequenceExpression, scope: Scope) {\n    let last;\n    for (const expr of node.expressions) {\n      last = this.walk(expr, scope);\n    }\n    return last;\n  }\n\n  // class相关\n  ClassDeclaration(node: ESTree.ClassDeclaration, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n  ClassExpression(node: ESTree.ClassExpression, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n  ClassBody(node: ESTree.ClassBody, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n  Super(node: ESTree.Super, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n  MethodDefinition(node: ESTree.MethodDefinition, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n\n  // 模板字符串\n  TemplateLiteral(node: ESTree.TemplateLiteral, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n  TemplateElement(node: ESTree.TemplateElement, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n  TaggedTemplateExpression(node: ESTree.TaggedTemplateExpression, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n\n  // 解构\n  ObjectPattern(node: ESTree.ObjectPattern, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n  AssignmentPattern(node: ESTree.AssignmentPattern, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n  ArrayPattern(node: ESTree.ArrayPattern, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n\n  // 其它\n  RestElement(node: ESTree.RestElement, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n  MetaProperty(node: ESTree.MetaProperty, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n  AwaitExpression(node: ESTree.AwaitExpression, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n\n  ForOfStatement(node: ESTree.ForOfStatement, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n  YieldExpression(node: ESTree.YieldExpression, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n  ArrowFunctionExpression(node: ESTree.ArrowFunctionExpression, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n  AssignmentProperty(node: ESTree.AssignmentProperty, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n\n  // import相关\n  ImportDeclaration(node: ESTree.ImportDeclaration, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n  ImportSpecifier(node: ESTree.ImportSpecifier, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n  ImportDefaultSpecifier(node: ESTree.ImportDefaultSpecifier, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n  ImportNamespaceSpecifier(node: ESTree.ImportNamespaceSpecifier, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n\n  // export相关\n  ExportSpecifier(node: ESTree.ExportSpecifier, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n  ExportNamedDeclaration(node: ESTree.ExportNamedDeclaration, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n  ExportDefaultDeclaration(node: ESTree.ExportDefaultDeclaration, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n  ExportAllDeclaration(node: ESTree.ExportAllDeclaration, scope: Scope) {\n    throw `${node.type} 未实现`;\n  }\n}\n","/**\n * @description 程序中中断信号相关实现，包含break，continue和return\n *\n * @export\n * @class Break_Signal\n */\nexport default class Break_Signal {\n  private readonly BREAK_SIGNAL: {} = {};\n  private readonly CONTINUE_SIGNAL: {} = {};\n  private readonly RETURN_SIGNAL: {} = {};\n\n  /**\n   * @description 供Map继承使用，单独创建实例没有意义\n   *\n   * @memberof Break_Signal\n   */\n  constructor() {}\n\n  /**\n   * @description 创建一个break信号\n   *\n   * @protected\n   * @returns\n   * @memberof Break_Signal\n   */\n  protected createBreakSignal() {\n    return this.BREAK_SIGNAL;\n  }\n\n  /**\n   * @description 创建一个continue信号\n   *\n   * @protected\n   * @returns {object}\n   * @memberof Break_Signal\n   */\n  protected createContinueSignal(): object {\n    return this.CONTINUE_SIGNAL;\n  }\n\n  /**\n   * @description 创建一个return信号\n   *\n   * @protected\n   * @param {*} data\n   * @returns {object}\n   * @memberof Break_Signal\n   */\n  protected createReturnSignal(data: any): object {\n    return { signal: this.RETURN_SIGNAL, data };\n  }\n\n  /**\n   * @description 判断当前信号是否是break信号\n   *\n   * @protected\n   * @param {*} signal\n   * @returns {boolean}\n   * @memberof Break_Signal\n   */\n  protected isBreakSignal(signal): boolean {\n    return signal === this.BREAK_SIGNAL;\n  }\n\n  /**\n   * @description 判断当前信号是否是continue信号\n   *\n   * @protected\n   * @param {*} signal\n   * @returns {boolean}\n   * @memberof Break_Signal\n   */\n  protected isContinueSignal(signal): boolean {\n    return signal === this.CONTINUE_SIGNAL;\n  }\n\n  /**\n   * @description 判断当前信号是否是return信号\n   *\n   * @protected\n   * @param {*} signal\n   * @returns {boolean}\n   * @memberof Break_Signal\n   */\n  protected isReturnSignal(signal): boolean {\n    return signal ? signal.signal === this.RETURN_SIGNAL : false;\n  }\n}\n","const NON_EXISTENT_INIT = {};\n\n\nexport default {\n    NON_EXISTENT_INIT\n}","// import \"babel-polyfill\";\nimport * as ESTree from \"estree\";\nimport Scope from \"./scope\";\nimport AST_Map from \"./ast_map\";\n\nexport { Scope };\n\n/**\n * @description VM主类\n *\n * @export\n * @class VM\n * @extends {AST_Map}\n */\nexport default class VM extends AST_Map {\n  private __context__: Scope;\n  private __callstack__: Function[];\n  private __inject_vars__: object | undefined;\n\n  /**\n   * @description 创建一个JS VM的实例\n   *\n   * @param {object} context\n   * @param {object} [args]\n   * @memberof VM\n   */\n  constructor(context: object, args?: object) {\n    super();\n    this.__context__ = new Scope(\"root\", null, []);\n    this.__callstack__ = [];\n    this.__context__.const(\"this\", context);\n    this.__inject_vars__ = args;\n\n    // 将剩余需要注入的参数注入到rootScope中\n    args && this.inject(args);\n    this.___inject_global_variable__();\n  }\n\n  /**\n   * @description JS VM创建之后的初始化\n   *\n   * @private\n   * @param {object} context\n   * @param {object} [args]\n   * @memberof VM\n   */\n  private init(context: object, args?: object): void {\n    this.__context__ = new Scope(\"root\", null, []);\n    this.__callstack__ = [];\n    this.__context__.const(\"this\", context);\n\n    // 将剩余需要注入的参数注入到rootScope中\n    if (args) Object.keys(args).forEach(prop => this.__context__.var(prop, args[prop]));\n    this.___inject_global_variable__();\n  }\n\n  /**\n   * @description 注入全局对象的内部方法\n   *\n   * @private\n   * @memberof VM\n   */\n  private ___inject_global_variable__(): void {\n    const global = {\n      console,\n      setTimeout,\n      setInterval,\n      clearTimeout,\n      clearInterval,\n      encodeURI,\n      encodeURIComponent,\n      decodeURI,\n      decodeURIComponent,\n      escape,\n      unescape,\n      Infinity,\n      NaN,\n      isFinite,\n      isNaN,\n      parseFloat,\n      parseInt,\n      Object,\n      Function,\n      Boolean,\n      Error,\n      EvalError,\n      RangeError,\n      ReferenceError,\n      SyntaxError,\n      TypeError,\n      URIError,\n      Number,\n      Math,\n      undefined,\n      Date,\n      String,\n      RegExp,\n      Array,\n      JSON,\n      Promise,\n      Symbol,\n      Set,\n      Map\n    };\n\n    // 注入微信的全局变量wx\n    // if (wx) global.wx = wx;\n\n    Object.keys(global).forEach(prop => this.__context__.const(prop, global[prop]));\n  }\n\n  /**\n   * @description 执行AST代码\n   *\n   * @param {ESTree.Node} ast\n   * @returns {*}\n   * @memberof VM\n   */\n  public execute(ast: ESTree.Node): any {\n    if (typeof ast === \"string\") ast = JSON.parse(ast);\n    return this.walk(ast, this.__context__);\n  }\n\n  /**\n   * @description 在当前VM实例的顶级作用域上以var形式注入变量\n   *\n   * @param {Object} args\n   * @memberof VM\n   */\n  public inject(args: Object): void {\n    if (args) Object.keys(args).forEach(prop => this.__context__.var(prop, args[prop]));\n  }\n\n  /**\n   * @description 获取当前VM实例的顶级作用域\n   *\n   * @returns {Scope}\n   * @memberof VM\n   */\n  public getRootScope(): Scope {\n    return this.__context__;\n  }\n\n  /**\n   * @description 在提供的Scope中运行给定的AST代码\n   *\n   * @param {Scope} scope\n   * @param {ESTree.Node} ast\n   * @returns {*}\n   * @memberof VM\n   */\n  public runInScope(scope: Scope, ast: ESTree.Node): any {\n    if (scope instanceof Scope) {\n      if (typeof ast === \"string\") ast = JSON.parse(ast);\n      return this.walk(ast, scope);\n    }\n    throw new Error(\"scope must be instance of Scope\");\n  }\n\n  /**\n   * @description 通过变量名获取在当前JSVM实例顶级作用域上的值\n   *\n   * @param {string} name\n   * @returns {*}\n   * @memberof VM\n   */\n  public getVariable(name: string): any {\n    return this.__context__.__get__(name);\n  }\n\n  /**\n   * @description 重置当前VM，作用域还原\n   *\n   * @memberof VM\n   */\n  public reset(): void {\n    const this_var = this.__context__.__get__(\"this\");\n    this.__context__ = new Scope(\"root\", null, []);\n    this.__callstack__ = [];\n    this.__context__.const(\"this\", this_var);\n\n    // 将剩余需要注入的参数注入到rootScope中\n    if (this.__inject_vars__) {\n      Object.keys(this.__inject_vars__).forEach(prop =>\n        this.__context__.var(prop, this.__inject_vars__ && this.__inject_vars__[prop])\n      );\n    }\n    this.___inject_global_variable__();\n  }\n}\n","import CONSTANT_TABLE from \"./constant_table\";\n\nexport default class Scope {\n  private __type__: string = \"block\";\n  private __variables__: Map<string, { decType: string; value: any }> = new Map();\n  private __parent__: Scope | null | undefined = null;\n  private __function_parent__: Scope | null = null;\n  private __children__: Scope[] = [];\n\n  /**\n   * @description 创建一个Scope作用域对象，非root类型的Scope必须提供一个父级Scope，且该父级Scope的原型链顶端必为root类型的Scope\n   *\n   * @param {string} type\n   * @param {object} parent\n   * @param {(Scope | Scope[])} children\n   * @memberof Scope\n   */\n  constructor(type: string, parent: Scope | null | undefined, children?: Scope | Scope[]) {\n    // 如果type是root则通过本类型创建，并将所有parent（context）的属性复制到prototype上\n    if (type === \"root\") {\n      this.__type__ = type;\n      this.__variables__ = new Map();\n      this.__parent__ = parent;\n      // if (parent) {\n\n      // }\n      // Object.keys(parent).forEach(key => {\n      //     Scope.prototype[key] = parent[key];\n      // });\n\n      // @todo 需要评估是否有必要，可能导致内存泄漏\n      // if(children) this.__add_children__(children);\n\n      return this;\n    }\n\n    // 如果类型不是root则通工厂模式（Object.Create）来创建对象并添加属性\n    return this.__create_child_scope__(type, parent, children);\n  }\n\n  /**\n   * @description 工厂模式创建非root类型的Scope\n   *\n   * @param {string} type\n   * @param {(Scope | object)} parent\n   * @param {(Scope | Scope[])} children\n   * @returns {Scope}\n   * @memberof Scope\n   */\n  private __create_child_scope__(type: string, parent: Scope | null | undefined, children?: Scope | Scope[]): Scope {\n    const scope = Object.create(parent || null);\n    scope.__type__ = type;\n    scope.__variables__ = new Map();\n    scope.__parent__ = parent;\n    scope.__function_parent__ = null;\n    scope.__children__ = children || [];\n\n    // @todo 需要评估是否有必要，可能导致内存泄漏\n    // if (parent instanceof Scope) {\n    //     parent.__add_children__(scope);\n    // }\n    return scope;\n  }\n\n  /**\n   * @description 给当前作用域添加子作用域\n   *\n   * @param {(Scope | Scope[])} children\n   * @memberof Scope\n   */\n  private __add_children__(children: Scope | Scope[]): void {\n    if (children) {\n      Array.isArray(children) ? this.__children__.push(...children) : this.__children__.push(children);\n      // this.__children__.push(Array.isArray(children) ? (...children) : children);\n    }\n  }\n\n  /**\n   * @description 判断 当前作用域链 是否拥有某个变量\n   *\n   * @param {string} variable_name\n   * @returns {boolean}\n   * @memberof Scope\n   */\n  public __has_variable_in_chain__(variable_name: string): boolean {\n    return this[variable_name] !== undefined;\n  }\n\n  /**\n   * @description 判断 当前作用域 内是否拥有某个变量\n   *\n   * @param {string} variable_name\n   * @returns {boolean}\n   * @memberof Scope\n   */\n  public __has_variable__(variable_name: string): boolean {\n    return this.__variables__.has(variable_name);\n  }\n\n  /**\n   * @description 根据变量名判断该变量在当前作用域的声明类型\n   *\n   * @param {string} variable_name\n   * @returns {('var' | 'let' | 'const' | 'function' | undefined)}\n   * @memberof Scope\n   */\n  public __get_dec_type__(variable_name: string): \"var\" | \"let\" | \"const\" | \"function\" | undefined {\n    return this[variable_name].decType;\n  }\n\n  /**\n   * @description 根据变量名获取变量值\n   *\n   * @param {string} variable_name\n   * @returns\n   * @memberof Scope\n   */\n  public __get__(variable_name: string) {\n    // console.log('variable_name: ', variable_name);\n    // console.log('variable_value: ', this[variable_name]);\n    const variable = this[variable_name];\n    if (variable) return variable.value;\n    throw new ReferenceError(`${variable_name} is not defined`);\n  }\n\n  /**\n   * @description 根据变量名设置变量的值\n   *\n   * @param {string} variable_name\n   * @param {*} value\n   * @returns\n   * @memberof Scope\n   */\n  public __set__(variable_name: string, value: any) {\n    const variable = this[variable_name];\n    if (variable) {\n      if (variable.decType === \"const\") throw new TypeError(\"Assignment to constant variable.\");\n      variable.value = value;\n      return variable.value;\n    }\n    throw new ReferenceError(`${variable_name} is not defined`);\n  }\n\n  /**\n   * @description 删除作用域中的变量\n   *\n   * @param {string} variable_name\n   * @returns\n   * @memberof Scope\n   */\n  public __remove__(variable_name: string) {\n    const variable = this[variable_name];\n    if (variable) {\n      return delete this[variable_name] && this.__variables__.delete(variable_name);\n    }\n    return false;\n  }\n\n  /**\n   * @description 在当前scope声明一个var类型的变量\n   *\n   * @param {string} variable_name\n   * @param {*} value\n   * @memberof Scope\n   */\n  public var(variable_name: string, value: any, getter_callback?: Function, setter_callback?: Function) {\n    this.__function_declaration__(\"var\", variable_name, value, getter_callback, setter_callback);\n  }\n\n  /**\n   * @description 在当前scope声明函数\n   *\n   * @param {string} function_name\n   * @param {Function} func\n   * @memberof Scope\n   */\n  public function(function_name: string, func: Function, getter_callback?: Function, setter_callback?: Function) {\n    this.__function_declaration__(\"function\", function_name, func, getter_callback, setter_callback);\n  }\n\n  /**\n   * @description 在当前作用域声明一个let类型的变量\n   *\n   * @param {string} variable_name\n   * @param {*} value\n   * @returns\n   * @memberof Scope\n   */\n  public let(variable_name: string, value: any, getter_callback?: Function, setter_callback?: Function) {\n    this.__block_declaration__(\"let\", variable_name, value, getter_callback, setter_callback);\n  }\n\n  /**\n   * @description 在当前作用域声明一个const类型的变量\n   *\n   * @param {string} variable_name\n   * @param {*} value\n   * @memberof Scope\n   */\n  public const(variable_name: string, value: any, getter_callback?: Function) {\n    // const声明没有初始化的错误处理在Map层实现，该层无法准确判断\n    this.__block_declaration__(\"const\", variable_name, value, getter_callback);\n  }\n\n  /**\n   * @description 找出一个Scope的最近父级Function类型的Scope\n   *\n   * @param {(Scope | null)} scope\n   * @returns {(Scope | null)}\n   * @memberof Scope\n   */\n  private __find_parent_function_scope__(scope: Scope | undefined | null): Scope | null {\n    if (scope) {\n      const sType = scope.__parent__ ? scope.__parent__.__type__ : null;\n      if (sType === \"function\" || sType === \"root\") return scope.__parent__ || null;\n      return scope.__find_parent_function_scope__(scope.__parent__);\n    }\n    return null;\n  }\n\n  /**\n   * @description 块级的声明，如const let\n   *\n   * @param {('const' | 'let')} dec_type\n   * @param {string} variable_name\n   * @param {*} value\n   * @returns\n   * @memberof Scope\n   */\n  private __block_declaration__(\n    dec_type: \"const\" | \"let\",\n    variable_name: string,\n    value: any,\n    getter_callback?: Function,\n    setter_callback?: Function\n  ) {\n    if (this.__variables__.has(variable_name)) {\n      throw new SyntaxError(`Uncaught SyntaxError: Identifier '${variable_name}' has already been declared`);\n    }\n\n    const variable = {\n      decType: dec_type,\n      value: value === CONSTANT_TABLE.NON_EXISTENT_INIT ? undefined : value\n    };\n    this.__variables__.set(variable_name, variable);\n\n    const _this = this;\n    let set = value => {\n      const originalValueObj = _this[variable_name];\n      originalValueObj.value = value;\n      _this.__variables__.set(variable_name, originalValueObj);\n\n      if (setter_callback && typeof setter_callback === \"function\") setter_callback();\n      return originalValueObj;\n    };\n    if (dec_type === \"const\") {\n      set = value => {\n        throw new TypeError(\"Assignment to constant variable\");\n      };\n    }\n    Object.defineProperty(this, variable_name, {\n      configurable: true,\n      enumerable: true,\n      // value,\n      // writable: true,\n      get() {\n        if (getter_callback && typeof getter_callback === \"function\") getter_callback();\n        return _this.__variables__.get(variable_name);\n      },\n      set\n    });\n\n    return variable;\n  }\n\n  /**\n   * @description 函数作用域的声明，如 var 和 function\n   *\n   * @param {('function' | 'var')} dec_type\n   * @param {string} variable_name\n   * @param {*} value\n   * @returns\n   * @memberof Scope\n   */\n  private __function_declaration__(\n    dec_type: \"function\" | \"var\",\n    variable_name: string,\n    value: any,\n    getter_callback?: Function,\n    setter_callback?: Function\n  ) {\n    const existing_variable = this.__variables__.get(variable_name);\n    if (existing_variable) {\n      const decType = existing_variable.decType;\n      if (decType === \"let\" || decType === \"const\")\n        throw SyntaxError(`Uncaught SyntaxError: Identifier '${variable_name}' has already been declared`);\n\n      // 处理重复声明时 并没有赋值的情况\n      if (value !== CONSTANT_TABLE.NON_EXISTENT_INIT) {\n        existing_variable.decType = dec_type;\n        existing_variable.value = value;\n      }\n\n      return existing_variable;\n    } else {\n      if (this.__type__ === \"function\" || this.__type__ === \"root\") {\n        const variable = {\n          decType: dec_type,\n          value: value === CONSTANT_TABLE.NON_EXISTENT_INIT ? undefined : value\n        };\n        this.__variables__.set(variable_name, variable);\n\n        const _this = this;\n        Object.defineProperty(this, variable_name, {\n          configurable: true,\n          enumerable: true,\n          // value,\n          // writable: true,\n          get() {\n            if (getter_callback && typeof getter_callback === \"function\") getter_callback();\n            return _this.__variables__.get(variable_name);\n          },\n          set(value) {\n            const originalValueObj = _this[variable_name];\n            originalValueObj.value = value;\n            _this.__variables__.set(variable_name, originalValueObj);\n\n            if (setter_callback && typeof setter_callback === \"function\") setter_callback();\n            return originalValueObj;\n          }\n        });\n        return variable;\n      } else {\n        if (!this.__function_parent__) {\n          this.__function_parent__ = this.__find_parent_function_scope__(this);\n        }\n        if (this.__function_parent__) {\n          const variable = this.__function_parent__.__function_declaration__(\n            dec_type,\n            variable_name,\n            value,\n            getter_callback,\n            setter_callback\n          );\n          if (variable) {\n            this.__variables__.set(variable_name, variable);\n            return variable;\n          }\n          throw new Error(`执行器内部错误，上层function作用域返回一个空的变量`);\n        } else {\n          throw new Error(`执行器内部错误，无法找到一个合适的作用域声明${dec_type}类型的变量`);\n        }\n      }\n    }\n  }\n}\n"],"sourceRoot":""}